# Reusable bed frame component template
# Uses substitutions for parameterization:
#   bed_prefix: Prefix for entity IDs (empty for primary bed)
#   bed_name: Display name prefix
#   remote_id: 32-bit remote ID for this bed
#   channel: Radio channel for this bed

cover:
  - platform: time_based
    name: "${bed_name}Head Position"
    id: ${bed_prefix}head_position
    close_duration: 20s
    open_duration: 20s
    open_action:
      - repeat:
          count: 400 # 20s
          then:
            - lambda: |-
                id(radio)->send_bed_command(${remote_id}, 1, 0, ${channel});
            - delay: 50ms
    close_action:
      - repeat:
          count: 400 # 20s
          then:
            - lambda: |-
                id(radio)->send_bed_command(${remote_id}, -1, 0, ${channel});
            - delay: 50ms  
    stop_action:
      - lambda: |-
          id(radio)->send_bed_command(${remote_id}, 0, 0, ${channel});

  - platform: time_based
    name: "${bed_name}Feet Position"
    id: ${bed_prefix}feet_position
    close_duration: 20s
    open_duration: 20s
    open_action:
      - repeat:
          count: 400 # 20s
          then:
            - lambda: |-
                id(radio)->send_bed_command(${remote_id}, 0, 1, ${channel});
            - delay: 50ms
    close_action:
      - repeat:
          count: 400 # 20s
          then:
            - lambda: |-
                id(radio)->send_bed_command(${remote_id}, 0, -1, ${channel});
            - delay: 50ms
    stop_action:
      - lambda: |-
          id(radio)->send_bed_command(${remote_id}, 0, 0, ${channel});

switch:
  - platform: template
    name: "${bed_name}Flatten"
    id: ${bed_prefix}bed_remote_flatten
    turn_on_action:
      then:
        - repeat:
            count: 400 # 20s
            then:
            - lambda: |-
                id(radio)->send_bed_command(${remote_id}, -1, -1, ${channel});
            - delay: 50ms
        - switch.template.publish:
            id: ${bed_prefix}bed_remote_flatten
            state: false
    optimistic: true

button:
  - platform: template
    name: "${bed_name}Head Up"
    id: ${bed_prefix}bed_remote_head_up
    on_press:
      then:
        - repeat:
            count: 5
            then:
            - lambda: |-
                id(radio)->send_bed_command(${remote_id}, 1, 0, ${channel});
            - delay: 50ms
  - platform: template
    name: "${bed_name}Head Down"
    id: ${bed_prefix}bed_remote_head_down
    on_press:
      then:
        - repeat:
            count: 5
            then:
            - lambda: |-
                id(radio)->send_bed_command(${remote_id}, -1, 0, ${channel});
            - delay: 50ms
  - platform: template
    name: "${bed_name}Feet Up"
    id: ${bed_prefix}bed_remote_feet_up
    on_press:
      then:
        - repeat:
            count: 5
            then:
            - lambda: |-
                id(radio)->send_bed_command(${remote_id}, 0, 1, ${channel});
            - delay: 50ms
  - platform: template
    name: "${bed_name}Feet Down"
    id: ${bed_prefix}bed_remote_feet_down
    on_press:
      then:
        - repeat:
            count: 5
            then:
            - lambda: |-
                id(radio)->send_bed_command(${remote_id}, 0, -1, ${channel});
            - delay: 50ms
  - platform: template
    name: "${bed_name}Both Up"
    id: ${bed_prefix}bed_remote_both_up
    on_press:
      then:
        - repeat:
            count: 5
            then:
            - lambda: |-
                id(radio)->send_bed_command(${remote_id}, 1, 1, ${channel});
            - delay: 50ms
  - platform: template
    name: "${bed_name}Both Down"
    id: ${bed_prefix}bed_remote_both_down
    on_press:
      then:
        - repeat:
            count: 5
            then:
            - lambda: |-
                id(radio)->send_bed_command(${remote_id}, -1, -1, ${channel});
            - delay: 50ms
